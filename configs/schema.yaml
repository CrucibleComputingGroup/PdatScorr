# JSON Schema for PDAT Synthesis Configuration Files
# This file documents the expected structure of synthesis configuration YAML files
# and can be used by validation tools and IDEs for autocomplete

$schema: "http://json-schema.org/draft-07/schema#"
title: "PDAT Synthesis Configuration"
description: "Configuration for RISC-V core synthesis with instruction constraints"

type: object
required:
  - core_name
  - architecture
  - signals
  - synthesis

properties:
  core_name:
    type: string
    description: "Name of the RISC-V core (e.g., ibex, boom, rocket, cva6)"
    examples:
      - "ibex"
      - "boom"
      - "rocket"

  architecture:
    type: string
    enum: ["rv32", "rv64"]
    description: "RISC-V architecture variant"

  # Signal mapping (from PdatRiscvDsl schema)
  signals:
    type: object
    description: "Signal name mappings for the target core"
    required:
      - instruction_data
      - pc
    properties:
      instruction_data:
        type: string
        description: "Signal name for the instruction word being decoded/executed"
        examples:
          - "instr_rdata_i"  # Ibex
          - "dec_uops_0_inst"  # BOOM
          - "ibuf_io_inst_0_bits_inst_bits"  # Rocket

      pc:
        type: string
        description: "Signal name for the program counter"
        examples:
          - "pc_if_o"  # Ibex
          - "exe_pc_0"  # BOOM
          - "ibuf_io_pc"  # Rocket

      operands:
        type: object
        description: "Operand signal names by execution unit type"
        properties:
          alu:
            type: object
            description: "ALU (arithmetic/logic unit) operand signals"
            required: ["rs1", "rs2"]
            properties:
              rs1:
                type: string
                description: "Source register 1 data for ALU operations"
              rs2:
                type: string
                description: "Source register 2 data for ALU operations"

          multdiv:
            type: object
            description: "Multiply/Divide unit operand signals"
            required: ["rs1", "rs2"]
            properties:
              rs1:
                type: string
                description: "Source register 1 data for MUL/DIV operations"
              rs2:
                type: string
                description: "Source register 2 data for MUL/DIV operations"

  # Multiple injection points configuration (REDESIGNED)
  injections:
    type: array
    description: "List of injection points for different types of constraints"
    items:
      type: object
      required:
        - name
        - source_file
        - constraint_type
      properties:
        name:
          type: string
          description: "Descriptive name for this injection point"
          examples:
            - "id_stage_isa"
            - "core_timing"
            - "lsu_memory"

        source_file:
          type: string
          description: "Source file to modify (relative to core_root)"
          examples:
            - "rtl/ibex_id_stage.sv"
            - "rtl/ibex_core.sv"
            - "rtl/ibex_load_store_unit.sv"

        constraint_type:
          type: string
          enum: ["isa", "timing", "custom"]
          description: "Type of constraint being injected"

        module_path:
          type: string
          description: "Optional hierarchical path to the module (for documentation/VCD analysis)"
          examples:
            - "ibex_core.id_stage_i"
            - "ibex_core"

        description:
          type: string
          description: "Human-readable description of what gets injected here"

        signals:
          type: object
          description: "Signals available at this injection point (optional, for reference)"
          additionalProperties: true

  # VCD analysis (from PdatRiscvDsl schema)
  vcd:
    type: object
    description: "VCD waveform analysis configuration"
    properties:
      testbench_prefix:
        type: string
        description: "Signal path prefix to strip when analyzing VCD files"
        examples:
          - "tb_ibex_random.dut"
          - "TestHarness.dut"

  # Synthesis configuration (NEW - specific to PdatScorr)
  synthesis:
    type: object
    description: "Synthesis tool configuration and source file locations"
    required:
      - core_root
      - source_files
      - include_dirs
    properties:
      core_root:
        type: string
        description: "Path to the core's root directory (can use environment variables like $IBEX_ROOT)"
        examples:
          - "$IBEX_ROOT"
          - "../PdatCoreSim/cores/ibex"
          - "/path/to/core"

      source_files:
        type: array
        description: "List of RTL source files to synthesize (relative to core_root, in dependency order)"
        items:
          type: string
        examples:
          - ["rtl/ibex_pkg.sv", "rtl/ibex_alu.sv", "rtl/ibex_core.sv"]

      include_dirs:
        type: array
        description: "Include directories for SystemVerilog (relative to core_root)"
        items:
          type: string
        examples:
          - ["rtl", "shared/rtl", "vendor/lowrisc_ip/ip/prim/rtl"]

      top_module:
        type: string
        description: "Name of the top-level module to synthesize"
        default: "ibex_core"

      parameters:
        type: object
        description: "Synthesis-time parameters to override"
        properties:
          writeback_stage:
            type: boolean
            description: "Enable 3-stage pipeline (WritebackStage parameter)"
            default: false
        additionalProperties:
          type: [string, number, boolean]
          description: "Additional core-specific parameters"

      abc:
        type: object
        description: "ABC optimization settings"
        properties:
          default_depth:
            type: integer
            description: "Default k-induction depth for sequential optimization"
            minimum: 1
            default: 2
          commands:
            type: string
            description: "Custom ABC command sequence (advanced users)"

additionalProperties: false

# Example complete configuration:
#
# core_name: "ibex"
# architecture: "rv32"
#
# # Multiple injection points
# injections:
#   - name: "id_stage_isa"
#     source_file: "rtl/ibex_id_stage.sv"
#     constraint_type: "isa"
#     module_path: "ibex_core.id_stage_i"
#     description: "ID/Decode stage - ISA instruction constraints"
#
#   - name: "core_timing"
#     source_file: "rtl/ibex_core.sv"
#     constraint_type: "timing"
#     module_path: "ibex_core"
#     description: "Core top-level - cache timing constraints"
#
# signals:
#   instruction_data: "instr_rdata_i"
#   pc: "pc_if_o"
#   operands:
#     alu:
#       rs1: "alu_operand_a_ex_i"
#       rs2: "alu_operand_b_ex_i"
#     multdiv:
#       rs1: "multdiv_operand_a_ex_i"
#       rs2: "multdiv_operand_b_ex_i"
#
# vcd:
#   testbench_prefix: "tb_ibex_random.dut"
#
# synthesis:
#   core_root: "$IBEX_ROOT"
#   top_module: "ibex_core"
#   include_dirs:
#     - "rtl"
#     - "shared/rtl"
#     - "vendor/lowrisc_ip/ip/prim/rtl"
#     - "vendor/lowrisc_ip/dv/sv/dv_utils"
#   source_files:
#     - "rtl/ibex_pkg.sv"
#     - "rtl/ibex_alu.sv"
#     - "rtl/ibex_branch_predict.sv"
#     - "rtl/ibex_compressed_decoder.sv"
#     - "rtl/ibex_controller.sv"
#     - "rtl/ibex_counter.sv"
#     - "rtl/ibex_cs_registers.sv"
#     - "rtl/ibex_csr.sv"
#     - "rtl/ibex_decoder.sv"
#     - "rtl/ibex_dummy_instr.sv"
#     - "rtl/ibex_ex_block.sv"
#     - "rtl/ibex_fetch_fifo.sv"
#     - "rtl/ibex_id_stage.sv"
#     - "rtl/ibex_if_stage.sv"
#     - "rtl/ibex_load_store_unit.sv"
#     - "rtl/ibex_multdiv_fast.sv"
#     - "rtl/ibex_multdiv_slow.sv"
#     - "rtl/ibex_pmp.sv"
#     - "rtl/ibex_prefetch_buffer.sv"
#     - "rtl/ibex_register_file_ff.sv"
#     - "rtl/ibex_wb_stage.sv"
#     - "vendor/lowrisc_ip/ip/prim/rtl/prim_assert.sv"
#     - "rtl/ibex_core.sv"
#   parameters:
#     writeback_stage: false
#   abc:
#     default_depth: 2
