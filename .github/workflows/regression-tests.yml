name: Regression Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  # Cache key version - increment to invalidate caches
  CACHE_VERSION: v1

jobs:
  test:
    name: Run Regression Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 120  # 2 hours for Synlig build from source

    steps:
    - name: Checkout PdatScorr
      uses: actions/checkout@v4
      with:
        path: PdatScorr

    - name: Checkout PdatRiscvDsl
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/PdatRiscvDsl
        path: PdatRiscvDsl

    - name: Checkout PdatCoreSim (for Ibex core)
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/PdatCoreSim
        path: PdatCoreSim
        submodules: recursive  # Important: pulls Ibex core submodule

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Restore Synlig Cache
      id: cache-synlig
      uses: actions/cache/restore@v4
      with:
        path: synlig-install
        key: ${{ runner.os }}-synlig-${{ env.CACHE_VERSION }}-2024-12-10

    - name: Build Synlig from source
      if: steps.cache-synlig.outputs.cache-matched-key == ''
      run: |
        echo "Building Synlig from source (this takes ~60 minutes)..."

        # Install Python dependencies for Surelog
        pip install orderedmultidict

        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake git \
          tclsh tcl-dev \
          ant default-jre \
          swig \
          python3 python3-dev python3-pip \
          uuid uuid-dev \
          flex libfl-dev \
          pkg-config libreadline-dev \
          bison libffi-dev \
          wget

        # Clone and build Synlig
        git clone https://github.com/chipsalliance/synlig.git
        cd synlig
        git submodule sync
        git submodule update --init --recursive third_party/{surelog,yosys}

        # Build with limited parallelism to avoid OOM
        make install -j2 PREFIX=$GITHUB_WORKSPACE/synlig-install

        echo "Synlig built and installed successfully"

    - name: Add Synlig to PATH
      run: |
        echo "$GITHUB_WORKSPACE/synlig-install/bin" >> $GITHUB_PATH
        ls -la $GITHUB_WORKSPACE/synlig-install/bin/ || echo "Synlig install directory not found"

    - name: Restore ABC Cache
      id: cache-abc
      uses: actions/cache/restore@v4
      with:
        path: abc-install
        key: ${{ runner.os }}-abc-stable-v1
        restore-keys: |
          ${{ runner.os }}-abc-

    - name: Install ABC
      if: steps.cache-abc.outputs.cache-matched-key == ''
      run: |
        echo "Installing ABC..."

        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libreadline-dev

        # Clone and build ABC
        git clone https://github.com/berkeley-abc/abc.git
        cd abc
        make -j$(nproc)

        # Install to workspace directory
        cd ..
        mkdir -p abc-install/bin
        cp abc/abc abc-install/bin/

        echo "ABC installed to abc-install"

    - name: Add ABC to PATH
      run: |
        echo "$GITHUB_WORKSPACE/abc-install/bin" >> $GITHUB_PATH

    - name: Verify tool installations
      run: |
        echo "=== Tool Versions ==="
        python3 --version
        echo ""
        echo "=== PATH ==="
        echo "$PATH"
        echo ""
        echo "=== Synlig ==="
        which synlig || echo "synlig not in PATH"
        ls -la $GITHUB_WORKSPACE/synlig-install/bin/synlig || echo "synlig binary not found"
        file $GITHUB_WORKSPACE/synlig-install/bin/synlig || echo "file check failed"
        ldd $GITHUB_WORKSPACE/synlig-install/bin/synlig || echo "ldd check failed"
        $GITHUB_WORKSPACE/synlig-install/bin/synlig --version || echo "Synlig direct call failed"
        echo ""
        echo "=== ABC ==="
        which abc || echo "abc not in PATH"
        ls -la $GITHUB_WORKSPACE/abc-install/bin/abc || echo "abc binary not found"
        echo "====================="

    - name: Install Python dependencies
      run: |
        cd PdatScorr
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set IBEX_ROOT environment variable
      run: |
        echo "IBEX_ROOT=$GITHUB_WORKSPACE/PdatCoreSim/cores/ibex" >> $GITHUB_ENV

    - name: Verify Ibex core exists
      run: |
        if [ -d "$IBEX_ROOT" ]; then
          echo "✓ Ibex core found at $IBEX_ROOT"
          ls -la "$IBEX_ROOT/rtl/" | head -10
        else
          echo "✗ Ibex core not found at $IBEX_ROOT"
          exit 1
        fi

    - name: Run regression tests
      run: |
        cd PdatScorr/tests
        # Run tests with limited parallelism to avoid Synlig/Surelog conflicts
        # The -n 1 flag runs tests sequentially
        ./run_regression.sh -v -n 1
      timeout-minutes: 30
      env:
        # Set malloc debugging to get better error messages
        MALLOC_CHECK_: 0

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-failure-outputs
        path: |
          PdatScorr/tests/regression/.pytest_cache/
          /tmp/pytest-*
        retention-days: 7

    - name: Save Synlig Cache
      if: always() && steps.cache-synlig.outputs.cache-matched-key == ''
      uses: actions/cache/save@v4
      with:
        path: synlig-install
        key: ${{ runner.os }}-synlig-${{ env.CACHE_VERSION }}-2024-12-10

    - name: Save ABC Cache
      if: always() && steps.cache-abc.outputs.cache-matched-key == ''
      uses: actions/cache/save@v4
      with:
        path: abc-install
        key: ${{ runner.os }}-abc-stable-v1

    - name: Generate test summary
      if: always()
      run: |
        cd PdatScorr/tests
        echo "## Regression Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f regression/.pytest_cache/v/cache/lastfailed ]; then
          echo "### ❌ Failed Tests" >> $GITHUB_STEP_SUMMARY
          cat regression/.pytest_cache/v/cache/lastfailed >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ All Tests Passed" >> $GITHUB_STEP_SUMMARY
        fi
